name: High Volume Daily Processor (800+ calls)

on:
  schedule:
    # Runs at 5 PM Central Time (11 PM UTC) - gives full night to process
    - cron: '0 23 * * *'
  workflow_dispatch:  # Allows manual trigger from GitHub UI
    inputs:
      target_date:
        description: 'Date to process (YYYY-MM-DD) - leave empty for yesterday'
        required: false
        type: string

jobs:
  process-800-calls:
    runs-on: ubuntu-latest
    timeout-minutes: 1440  # 24 hours max
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify API Keys
        env:
          GROQ_API_KEY_1: ${{ secrets.GROQ_API_KEY_1 }}
          GROQ_API_KEY_2: ${{ secrets.GROQ_API_KEY_2 }}
          GROQ_API_KEY_3: ${{ secrets.GROQ_API_KEY_3 }}
          GROQ_API_KEY_4: ${{ secrets.GROQ_API_KEY_4 }}
          GROQ_API_KEY_5: ${{ secrets.GROQ_API_KEY_5 }}
          GROQ_API_KEY_6: ${{ secrets.GROQ_API_KEY_6 }}
          GROQ_API_KEY_7: ${{ secrets.GROQ_API_KEY_7 }}
          GROQ_API_KEY_8: ${{ secrets.GROQ_API_KEY_8 }}
        run: |
          echo "Checking API keys..."
          python test_keys.py
      
      - name: Run High Volume Processor (800+ calls)
        env:
          RC_CLIENT_ID: ${{ secrets.RC_CLIENT_ID }}
          RC_CLIENT_SECRET: ${{ secrets.RC_CLIENT_SECRET }}
          RC_JWT: ${{ secrets.RC_JWT }}
          GROQ_API_KEY_1: ${{ secrets.GROQ_API_KEY_1 }}
          GROQ_API_KEY_2: ${{ secrets.GROQ_API_KEY_2 }}
          GROQ_API_KEY_3: ${{ secrets.GROQ_API_KEY_3 }}
          GROQ_API_KEY_4: ${{ secrets.GROQ_API_KEY_4 }}
          GROQ_API_KEY_5: ${{ secrets.GROQ_API_KEY_5 }}
          GROQ_API_KEY_6: ${{ secrets.GROQ_API_KEY_6 }}
          GROQ_API_KEY_7: ${{ secrets.GROQ_API_KEY_7 }}
          GROQ_API_KEY_8: ${{ secrets.GROQ_API_KEY_8 }}
          HUBSPOT_ACCESS_TOKEN: ${{ secrets.HUBSPOT_ACCESS_TOKEN }}
        run: |
          echo "🚀 Starting High Volume Processor at $(date)"
          echo "📊 Optimized for 800+ calls with smart delays"
          python daily_call_processor_800.py
          echo "✅ Completed at $(date)"
      
      - name: Upload recordings and transcriptions
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: recordings-${{ github.run_number }}-$(date +%Y%m%d)
          path: |
            daily_recordings/
            *.log
          retention-days: 30
          compression-level: 9  # Maximum compression for large files
      
      - name: Generate summary report
        if: always()
        run: |
          echo "## 📊 Processing Summary" > summary.md
          echo "" >> summary.md
          
          # Read summary JSON if exists
          YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)
          SUMMARY_FILE="daily_recordings/$YESTERDAY/summary.json"
          
          if [ -f "$SUMMARY_FILE" ]; then
            echo "### Results for $YESTERDAY" >> summary.md
            echo "" >> summary.md
            echo "| Metric | Value |" >> summary.md
            echo "|--------|-------|" >> summary.md
            
            # Parse JSON and create table
            TOTAL_CALLS=$(jq -r '.total_calls' $SUMMARY_FILE)
            RECORDINGS=$(jq -r '.recordings_found' $SUMMARY_FILE)
            PROCESSED=$(jq -r '.recordings_processed' $SUMMARY_FILE)
            DURATION=$(jq -r '.duration' $SUMMARY_FILE)
            KEYS=$(jq -r '.api_keys_used' $SUMMARY_FILE)
            
            echo "| Total Calls | $TOTAL_CALLS |" >> summary.md
            echo "| Recordings Found | $RECORDINGS |" >> summary.md
            echo "| Successfully Processed | $PROCESSED |" >> summary.md
            echo "| Processing Time | $DURATION |" >> summary.md
            echo "| API Keys Used | $KEYS |" >> summary.md
            
            # Calculate success rate
            if [ $RECORDINGS -gt 0 ]; then
              SUCCESS_RATE=$(( $PROCESSED * 100 / $RECORDINGS ))
              echo "| Success Rate | $SUCCESS_RATE% |" >> summary.md
            fi
          else
            echo "⚠️ Summary file not found" >> summary.md
          fi
          
          echo "" >> summary.md
          echo "### 📥 Download Results" >> summary.md
          echo "[Click here to download recordings and transcriptions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> summary.md
          
          cat summary.md
      
      - name: Upload summary
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: processing-summary
          path: summary.md
